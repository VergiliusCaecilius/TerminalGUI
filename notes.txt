Goals
	-better off keeping it as txt
	-
	
	

**the main code **
The client code(the code that runs the main method) is in the class TerminalGUI class. As of now, this code
works by having a thread that is constantly listening for user input without interupt to what is inputed by 
the user in the terminal panel. It then executes that command, writes it to the terminal panel and 
then repeats constantly listening for user input. 
On top of this there is the GUI command helper panels to the left and right of the terminal panel. To the left
is a list of commands. To the right, is the man Page that will display when you click on them. The code is smart
enough to not only show man pages but also help for bash keywords as well. The fetching of all the commands in
the getCommands function in OSInterface is its own process. The displaying of the man page is also its own process.
This is done on purpose to pass the issue off to the schedueler, so you can look at your commands while the 
terminal is printing something per se. 



**JSON/CVC/BINARY vs txt**
we have decided to keep storing the user input for predicitve purpose. Because the predictions only update
on boot, we are not as worried about time. This means we are better off counting all the operations. 
This also give us more options in terms predicting over a sequence. We can know predict in n-grams 
not just one token commands.



